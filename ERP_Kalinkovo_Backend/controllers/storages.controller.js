// controllers/storages.controller.js
import { poolPromise, sql } from "../db.js";
import logger from "../logger.js";

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* üì¶ 1. –ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤ (–¥–ª—è –∫–∞—Ä—â–∏–∫–∞ / –º–µ–Ω–µ–¥–∂–µ—Ä–∞) */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [{ id, name }] –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ –∫–∞—Ä—â–∏–∫–∞ / –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
 */
export const getSimpleStoragesList = async (_req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request().query(`
      SELECT id, name
      FROM Storages
      WHERE is_active = 1
      ORDER BY name ASC
    `);
    res.json(result.recordset);
  } catch (error) {
    await logger.error("[storages] simple_list_error", { message: error.message });
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤" });
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* üß∞ 2. –ü–æ–ª–Ω—ã–π CRUD –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤
 */
export const getStorages = async (_req, res) => {
  try {
    const pool = await poolPromise;
    const result = await pool.request().query(`
      SELECT 
        id,
        name,
        type,
        is_active,
        show_temperature,
        FORMAT(created_at, 'dd.MM.yyyy, HH:mm:ss') AS created_at
      FROM Storages
      ORDER BY id DESC
    `);
    res.json(result.recordset);
  } catch (error) {
    await logger.error("[storages] list_error", { message: error.message });
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤" });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø–æ ID
 */
export const getStorageById = async (req, res) => {
  try {
    const { id } = req.params;
    const pool = await poolPromise;

    const result = await pool
      .request()
      .input("id", sql.Int, id)
      .query(`
        SELECT id, name, type, is_active, show_temperature, created_at
        FROM Storages
        WHERE id = @id
      `);

    if (result.recordset.length === 0)
      return res.status(404).json({ message: "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    res.json(result.recordset[0]);
  } catch (error) {
    await logger.error("[storages] get_error", { message: error.message });
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞" });
  }
};

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫
 */
export const createStorage = async (req, res) => {
  try {
    const { name, type, is_active = true, show_temperature = false } = req.body;

    if (!name || !type)
      return res.status(400).json({ message: "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });

    const pool = await poolPromise;
    const result = await pool
      .request()
      .input("name", sql.NVarChar(255), name)
      .input("type", sql.NVarChar(50), type)
      .input("is_active", sql.Bit, is_active)
      .input("show_temperature", sql.Bit, show_temperature)
      .query(`
        INSERT INTO Storages (name, type, is_active, show_temperature, created_at)
        OUTPUT INSERTED.*
        VALUES (@name, @type, @is_active, @show_temperature, GETDATE())
      `);

    res.status(201).json(result.recordset[0]);
  } catch (error) {
    await logger.error("[storages] create_error", { message: error.message });
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞" });
  }
};

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫
 */
export const updateStorage = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, type, is_active, show_temperature } = req.body;

    const pool = await poolPromise;
    const result = await pool
      .request()
      .input("id", sql.Int, id)
      .input("name", sql.NVarChar(255), name)
      .input("type", sql.NVarChar(50), type)
      .input("is_active", sql.Bit, is_active)
      .input("show_temperature", sql.Bit, show_temperature)
      .query(`
        UPDATE Storages
        SET 
          name = @name,
          type = @type,
          is_active = @is_active,
          show_temperature = @show_temperature
        WHERE id = @id;

        SELECT * FROM Storages WHERE id = @id;
      `);

    if (result.recordset.length === 0)
      return res.status(404).json({ message: "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    res.json(result.recordset[0]);
  } catch (error) {
    await logger.error("[storages] update_error", { message: error.message });
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞" });
  }
};

/**
 * –£–¥–∞–ª–∏—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫
 */
export const deleteStorage = async (req, res) => {
  try {
    const { id } = req.params;
    const pool = await poolPromise;

    const result = await pool
      .request()
      .input("id", sql.Int, id)
      .query("DELETE FROM Storages WHERE id = @id");

    if (result.rowsAffected[0] === 0)
      return res.status(404).json({ message: "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    res.json({ message: "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ —É–¥–∞–ª—ë–Ω" });
  } catch (error) {
    await logger.error("[storages] delete_error", { message: error.message });
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞" });
  }
};
