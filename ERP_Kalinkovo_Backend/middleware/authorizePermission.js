// middleware/authorizePermission.js
import { poolPromise, sql } from "../db.js";
import logger from "../logger.js";

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (permission_key)
 */
export function authorizePermission(requiredPermissionKey) {
  return async function (req, res, next) {
    try {
      const user = req.user;
      if (!user || !user.id) {
        return res.status(401).json({ message: "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" });
      }

      const pool = await poolPromise;
      const result = await pool
        .request()
        .input("userId", sql.Int, user.id)
        .input("permKey", sql.NVarChar, requiredPermissionKey)
        .query(`
          SELECT p.permission_key, up.is_allowed
          FROM UserPermissions up
          JOIN Permissions p ON p.id = up.permission_id
          WHERE up.user_id = @userId
            AND p.permission_key = @permKey
        `);

      if (result.recordset.length === 0) {
        await logger.warn(`[AUTHZ] ‚ùå ${user.name || user.login} ‚Üí –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (${requiredPermissionKey})`);
        return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
      }

      const { is_allowed } = result.recordset[0];
      if (!is_allowed) {
        await logger.warn(`[AUTHZ] üö´ ${user.name || user.login} ‚Üí –ø—Ä–∞–≤–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ (${requiredPermissionKey})`);
        return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
      }

      await logger.info(`[AUTHZ] ‚úÖ ${user.name || user.login} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø: ${requiredPermissionKey}`);
      next();
    } catch (err) {
      await logger.error("[AUTHZ ERROR]", { message: err.message, stack: err.stack });
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π" });
    }
  };
}
