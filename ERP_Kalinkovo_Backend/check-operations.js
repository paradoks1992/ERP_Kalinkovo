// backend/check-operations.js
import { sequelize, Operation, Refrigerator, Balance } from './src/models/index.js';

async function checkOperations() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏
    const refrigerators = await Refrigerator.findAll();
    console.log('üìã –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏ –≤ –±–∞–∑–µ:');
    refrigerators.forEach(fridge => {
      console.log(`   ID: ${fridge.id}, Name: ${fridge.name}, Location: ${fridge.location}`);
    });
    
    console.log('\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operations = await Operation.findAll({
      limit: 10,
      order: [['timestamp', 'DESC']],
      include: ['Refrigerator']
    });
    
    console.log('üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π:');
    if (operations.length === 0) {
      console.log('   ‚ùå –û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } else {
      operations.forEach(op => {
        console.log(`   ID: ${op.id}, –û–ø–µ—Ä–∞—Ü–∏—è: ${op.operation}, –°–æ—Ä—Ç: ${op.sort}, –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫: ${op.Refrigerator ? op.Refrigerator.name : 'N/A'}, –î–∞—Ç–∞: ${op.timestamp}`);
      });
    }
    
    console.log('\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    const balances = await Balance.findAll({
      where: { quantity: { $gt: 0 } },
      limit: 10
    });
    
    console.log('üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:');
    if (balances.length === 0) {
      console.log('   ‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–µ—Ç');
    } else {
      balances.forEach(balance => {
        console.log(`   –°–æ—Ä—Ç: ${balance.sort}, –¢–∏–ø: ${balance.type}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${balance.quantity}, –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫: ${balance.refrigerator_id}`);
      });
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    await sequelize.close();
  }
}

checkOperations();