// db.js ‚Äî –Ω–∞–¥—ë–∂–Ω–æ–µ —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–µ–µ—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MSSQL + Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
import sql from "mssql";
import dotenv from "dotenv";
import logger from "./logger.js";

dotenv.config();

const config = {
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  server: process.env.DB_SERVER,
  database: process.env.DB_NAME,
  port: parseInt(process.env.DB_PORT || "1433", 10),
  options: {
    encrypt: false,
    trustServerCertificate: true,
    enableArithAbort: true,
    useUTC: true,
    tdsVersion: "7_4",
    connectionIsolationLevel: sql.ISOLATION_LEVEL.READ_COMMITTED,
  },
  pool: {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000,
  },
};

let pool;
let isConnecting = false;
let lastConnectTime = null;
let lastDbDownAt = null;

/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∞–≤—Ç–æ-—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–æ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export async function connectToDb() {
  if (pool && pool.connected) return pool;
  if (isConnecting) {
    await new Promise((res) => setTimeout(res, 1000));
    return connectToDb();
  }

  try {
    isConnecting = true;
    const start = Date.now();
    pool = await sql.connect(config);
    const ms = Date.now() - start;
    lastConnectTime = new Date();

    // –µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (lastDbDownAt) {
      const downtime = Date.now() - lastDbDownAt;
      lastDbDownAt = null;
      await logger.dbRecovery(downtime);
    } else {
      await logger.info("db_connected", `‚úÖ MSSQL –ø–æ–¥–∫–ª—é—á–µ–Ω (${ms} ms): ${config.server}/${config.database}`);
    }

    pool.on("error", async (err) => {
      await logger.error("db_pool_error", { message: err.message });
      await reconnect();
    });

    isConnecting = false;
    return pool;
  } catch (err) {
    isConnecting = false;
    lastDbDownAt = Date.now();
    await logger.dbDown(err.message);
    await new Promise((res) => setTimeout(res, 5000));
    return connectToDb();
  }
}

/**
 * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—É–ª–∞
 */
async function reconnect() {
  try {
    if (pool && pool.connected) await pool.close();
  } catch (err) {
    await logger.warn("db_close_error", { message: err.message });
  }
  pool = null;
  await logger.info("db_reconnect", "‚ôªÔ∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MSSQL...");
  await connectToDb();
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (heartbeat)
 */
async function checkDbHealth() {
  try {
    const conn = await connectToDb();
    const start = Date.now();
    await conn.request().query("SELECT 1 AS alive");
    const ms = Date.now() - start;
    await logger.info("db_heartbeat", `‚úÖ MSSQL –∂–∏–≤ (${ms} ms)`);
  } catch (err) {
    lastDbDownAt = Date.now();
    await logger.dbDown(err.message);
    await reconnect();
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function safeQuery(query, params = []) {
  const conn = await connectToDb();
  const request = conn.request();

  params.forEach((p) => request.input(p.name, p.type, p.value));

  const start = Date.now();
  try {
    const result = await request.query(query);
    const ms = Date.now() - start;

    if (ms > 1000) {
      await logger.slowQuery({ query, duration: ms });
    }

    return result;
  } catch (err) {
    await logger.error("query_error", { query, message: err.message });
    throw err;
  }
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π heartbeat –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 */
setInterval(checkDbHealth, 5 * 60 * 1000).unref();

/**
 * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ SIGINT/SIGTERM
 */
async function shutdown() {
  await logger.info("db_shutdown", "üõë MSSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è...");
  if (pool && pool.connected) await pool.close();
  process.exit(0);
}

process.on("SIGINT", shutdown);
process.on("SIGTERM", shutdown);

// –ü–µ—Ä–≤–∏—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
connectToDb();

export const poolPromise = connectToDb();
export { sql };
export default { sql, connectToDb, poolPromise, safeQuery };
